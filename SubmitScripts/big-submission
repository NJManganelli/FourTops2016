#!/bin/bash

SLEEP_TIME=900 # in seconds
RETRY_ERROR_STEP_TIME=60 # increase sleep time between each error retry
MAX_JOBS_ON_CE=1500

# Colors
BLUE='\033[1;34m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YEL='\033[1;33m'
DEF='\033[0;m'

# Nice printing
I="$GREEN[INFO] $DEF"
E="$RED[ERROR] $DEF"
W="$YEL[WARN] $DEF"

# 1st arg is the echo level {I,W,E}
# Rest of the args are printed as is
# eg: nice_echo I "This is a super test."
function nice_echo(){
   local level=$1
   shift
   echo -e ${!level}[$(date "+%d/%m %H:%M")] "$@"
}


function usage(){
  echo -e "

  This script will execute qsub lines taken from a file, making sure there's
  at least $MAX_JOBS_ON_CE jobs present every $SLEEP_TIME seconds for the user on the cluster.

USAGE:
  big-submission myqsubcommands.txt

  with myqsubcommands.txt looking like:
qsub -q localgrid /path/to/myscript1.sh
qsub -q localgrid /path/to/myscript2.sh
 # qsub -q localgrid /path/to/myscript2.sh
qsub -q localgrid /path/to/myscript2.sh

  big-submission -h : will print this help.

\nDETAILS:

  * The script works in the background, so you can deconnect from your session
    while it continues sending jobs.
  * Commented lines starting with '#' as well as empty lines will be omitted.
  * Each time a job is sent, it is deleted from myqsubcommands.txt,
    ie the file always contains jobs not sent. This way, if you kill
    big-submission, you know what's left to send.
  * The lines that failed will be tried once more at the end.
  * The script is meant to run once per user. If you want to add
    some commands to send, [stop big-submission], add them to
    myqsubcommands.txt, [restart big-submission].
    Editing the command list live is possible although not recommended,
    and should be done fast, with for instance \`cat file2 >> myqsubcommands.txt\`
  * 3 files are always created for each execution of the script:
     - myqsubcommands.txt.DATE : a backup containing all qsub lines to submit.
     - big-submission.DATE.err : a list of all qsub lines that failed.
     - big-submission.DATE.log : a log file of all actions executed.
  * To read the logs, one suggests using \`less -r logfile\`, this way colors will be
    printed nicely.

"
}

function fileIsFresh(){
  file=$1
  fileTimeInSeconds=$(timeout -s 9 3 ls -l --time-style=+%s $file|awk '{print $6}')
  currentTimeInSeconds=$(date +%s)
  let currentTimeInSeconds=$currentTimeInSeconds-$SLEEP_TIME

  if [ $fileTimeInSeconds -gt $currentTimeInSeconds ];then
    return 0
  else
    return 1
  fi
}

function getNumJobsOnCE(){
  # Setting default for number of jobs
  nJobs=-1

  # NFS file that is used first
  qstatFile='/group/log/dumpOfFullQstat'

  # Checking if NFS file is accessible and not empty
  timeout -s 9 3 ls $qstatFile &> /dev/null
  if [ $? -eq 0 ] && [ $(wc -l $qstatFile|awk '{print $1}') -gt 0 ];then

    # Checking if NFS file has been updated recently
    if fileIsFresh $qstatFile;then
      nJobs=$(cat $qstatFile|grep -e Job_Owner|grep -c $USER)
    fi
  fi

  # If NFS is not accessible, or file is not fresh
  if [ $nJobs -eq -1 ];then

    # Doing a standard qstat
    nJobs=$(qstat -u $USER |grep $USER|wc -l)

    # If qstat command fails, sleep then start again
    if [ $? -ne 0 ];then
      sleep 20
      nJobs=$(qstat -u $USER |grep $USER|wc -l)

      # If qstat fails again, allowing only 100 jobs to be sent out
      if [ $? -ne 0 ];then
        let nJobs=$MAX_JOBS_ON_CE-100
      fi

    fi
  fi

  echo $nJobs
}

function sendJob(){
  file=$1

  echo -e "${BLUE}Command:$DEF $(head -n1 $file)"
  # Executing first line
  $(head -n1 $file)
  outputCode=$?

  # Logging all failing commands
  if [ $outputCode -ne 0 ];then
    echo "$(head -n1 $file)" >> $err
  fi

  # Deleting first line from file
  sed -i 1d $file

  # very small sleep to give time to CE to digest
  sleep 0.40
}

function startNJobs(){
  nJobsToStart=$1
  i=0
  while [ $i -lt $nJobsToStart ];do
    sendJob $file
    let i=$i+1
  done
}

function sendLoop(){
  retryErrors=0
  errorSleepTime=0
  while [ $(wc -l $file|awk '{print $1}') ];do
    nRunning=$(getNumJobsOnCE)
    nJobsLeftToSend=$(wc -l $file|awk '{print $1}')

    # Calculating number of jobs I'm allowed to send
    let nJobsToStart=$MAX_JOBS_ON_CE-$nRunning

    # taking min of (nJobsToStart, nJobsLeftToSend)
    if [ $nJobsToStart -gt $nJobsLeftToSend ];then nJobsToStart=$nJobsLeftToSend ; fi

    message="There are $nRunning jobs on the cluster and $nJobsLeftToSend left to run, "
    if [ $nJobsToStart -lt 1 ];then message="$message can't send any jobs."
    else message="$message sending $nJobsToStart jobs:" ; fi
    nice_echo I "$message"

    # Starting jobs
    startNJobs $nJobsToStart

    # If no jobs left to run, retry error or break
    if [ $(wc -l $file|awk '{print $1}') -eq 0 ];then

        # No errors to retry, breaking
        if [ $(wc -l $err|awk '{print $1}') -eq 0 ];then
            nice_echo I "No errors to retry."
            break
        fi

        # There are still errors (previous if), but they were already retried, breaking
        if [ $retryErrors -gt 2 ];then
            nice_echo E "There are still $(wc -l $err|awk '{print $1}') errors, already tried $retryErrors times, not trying them again.\n\t\t\t See list in $YEL$err$DEF"
            break
        fi

        # Retrying errors
        errorSleepTime=$(($errorSleepTime + $RETRY_ERROR_STEP_TIME))
        nice_echo W "Sleeping for $errorSleepTime, then retrying errors ..."
        retryErrors=$(($retryErrors + 1))
        cat $err >> $file
        echo -n "" > $err

        # Cutting the sleeping time before redoing errors
        sleep $errorSleepTime
        continue
    fi

    # Sleeping
    sleep  $SLEEP_TIME
  done

  nice_echo I "There's no more jobs to run, exiting !"
}


if [ $# -ne 1 ];then
    echo -e "\n$E You need to provide the file with the list of qsub commands to execute !"
    usage
    exit 1
fi

# Printing help if argument looks like it
case $1 in -h|-help|--help) usage  ; exit 0 ;; esac

file=$1

if [ ! -f $file ];then
    echo -e "$E The file \"$file\" does not exist"
    exit 1
fi

datestamp=$(date  +%Y%m%d-%H:%M:%S)

# Making copy of input file as we are going to edit the original
backupFile=$file.$datestamp
echo -e "$I I'm going to edit the input file, so I'm making a backup copy of it at: $CYAN$backupFile$DEF"
cp $file $backupFile

# Ommitting commented lines
echo -e "$I Ommitting empty/commented lines ..."
sed -i '/^[ ]*#/d' $file
sed -i '/^[ ]*$/d' $file

# Log file
log=big-submission-$datestamp.log
# Error file
err=big-submission-$datestamp.err
touch $err

# Number of jobs to run
nJobsToRun=$(cat $file|wc -l)
echo -e "$I There are $BLUE$nJobsToRun$DEF Jobs to run"

# Warn if some lines don't start with qsub
nLinesNotStartingWithQsub=$(grep -v -c -e '^qsub ' $file)
if [ $nLinesNotStartingWithQsub -ne 0 ];then
  echo -e "$W$YEL There are $nLinesNotStartingWithQsub lines not starting with qsub in input file, please be carefull !$DEF"
fi

# Current directory
echo -e "$I Current directory: $BLUE$PWD$DEF"

read -p "Are you sure you want to start sending jobs in background ? [y/N] " answer
case $answer in
  yes|YES|y|Y) ;;
  *) echo -e "Stopping here ..." ; exit 1 ;;
esac


#sendLoop
sendLoop &> $log &

echo -e "$I Starting send loop in background, see log file $CYAN$log$DEF ."
echo -e "        All failing qsub commands will be logged to $YEL$err$DEF ."
